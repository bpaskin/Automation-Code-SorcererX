Here is the equivalent Ansible Playbook for the given Puppet module:

```yaml
---
- name: Deploy Rails webapp
  hosts: webapp
  become: yes
  vars:
    service_webapp_repo: "{{ cloudify_attributes.service_webapp_repo }}"
    service_webapp_tag: "{{ cloudify_attributes.service_webapp_tag }}"
    db_user: "{{ cloudify_attributes.user | default('mysql') }}"
    db_password: "{{ cloudify_attributes.password | default('mysql') }}"
    db_name: "{{ cloudify_attributes.db_name | default('default') }}"
    db_ip: "{{ cloudify_attributes.ip | default('127.0.0.1') }}"
  tasks:
    - name: Notify about deployment
      ansible.builtin.debug:
        msg: "Beginning deploy of {{ service_webapp_repo }} version {{ service_webapp_tag }} into /opt/webapps/rails"

    - name: Install necessary packages
      apt:
        name:
          - rubygems
          - ruby-dev
          - libxml2-dev
          - libxslt-dev
          - libsqlite3-dev
          - libmysqlclient-dev
        state: present

    - name: Install bundler
      gem:
        name: bundler
        state: present

    - name: Ensure Apache is installed
      apt:
        name: apache2
        state: present

    - name: Ensure proxy module is enabled
      apache_module:
        name: proxy_http
        state: present

    - name: Ensure webapp directory exists
      file:
        path: /opt/webapps
        state: directory

    - name: Clone webapp repository
      git:
        repo: "{{ service_webapp_repo }}"
        dest: "{{ WEBAPP_PATH }}"

    - name: Checkout specific tag
      git:
        repo: "{{ service_webapp_repo }}"
        version: "{{ service_webapp_tag }}"
        dest: "{{ WEBAPP_PATH }}"
        force: yes

    - name: Add unicorn gem to Gemfile.local
      copy:
        dest: "{{ WEBAPP_PATH }}/Gemfile.local"
        content: "gem 'unicorn'\n"

    - name: Install gems
      command: bundle install --without development test rmagick postgresql
      args:
        chdir: "{{ WEBAPP_PATH }}"
        creates: "{{ WEBAPP_PATH }}/vendor/bundle"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/bin:/usr/local/bin:/bin"

    - name: Generate secret key base
      command: bundle exec rake generate_session_store
      args:
        chdir: "{{ WEBAPP_PATH }}"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/bin:/usr/local/bin:/bin"

    - name: Configure database.yml
      template:
        src: database.yml.j2
        dest: "{{ WEBAPP_PATH }}/config/database.yml"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/bin:/usr/local/bin:/bin"

    - name: Run database migrations and load data
      command: bundle exec rake db:migrate RAILS_ENV=production && bundle exec rake redmine:load_default_data RAILS_ENV=production REDMINE_LANG=en
      args:
        chdir: "{{ WEBAPP_PATH }}"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/bin:/usr/local/bin:/bin"

    - name: Create rails user
      user:
        name: rails
        home: "{{ WEBAPP_PATH }}"
        createhome: yes
        shell: /bin/sh
        groups:
          - www-data
      when: ansible_os_family == "Debian"

    - name: Set ownership for webapp directories
      file:
        path:
          - "{{ WEBAPP_PATH }}/files"
          - "{{ WEBAPP_PATH }}/log"
          - "{{ WEBAPP_PATH }}/tmp"
          - "{{ WEBAPP_PATH }}/public"
        owner: rails
        group: www-data
        mode: '0755'
        state: directory
      when: ansible_os_family == "Debian"

    - name: Configure and start unicorn server
      upstart_job:
        name: unicorn
        command: start-stop-daemon --start -c rails -d {{ WEBAPP_PATH }} --exec /usr/local/bin/bundle -- exec unicorn_rails -E production
        enabled: yes
        start_timeout: 300
        state: started

    - name: Disable default Apache vhost
      command: /usr/sbin/a2dissite default
      when: ansible_os_family == "Debian"

    - name: Configure Apache vhost
      apache_vhost:
        name: webapp
        template: webapp.erb