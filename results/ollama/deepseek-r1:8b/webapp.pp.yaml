Here is the equivalent Ansible Playbook in YAML:

```yaml
- name: Deploy Rails Webapp
  hosts: webapp_servers
  vars:
    service_webapp_repo: "{{ service_webapp_repo }}"
    service_webapp_tag: "{{ service_webapp_tag }}"
    db_user: "{{ get_cloudify_attribute('user', 'service', 'redmine_puppet', 'mysql') }}"
    db_password: "{{ get_cloudify_attribute('password', 'service', 'redmine_puppet', 'mysql') }}"
    db_name: "{{ get_cloudify_attribute('db_name', 'service', 'redmine_puppet', 'mysql') }}"
    db_ip: "{{ get_cloudify_attribute('ip', 'service', 'redmine_puppet', 'mysql') }}"

  tasks:
    - name: Begin deploy of {{ service_webapp_repo }} version {{ service_webapp_tag }}
      ansible.builtin.debug:
        msg: "Beginning deploy of {{ service_webapp_repo }} version {{ service_webapp_tag }} into /opt/webapps/rails"

    - name: Install required packages
      ansible.builtin.package:
        name:
          - rubygems
          - ruby-dev
          - libxml2-dev
          - libxslt-dev
          - libsqlite3-dev
          - libmysqlclient-dev
        state: present

    - name: Install bundler
      ansible.builtin.gem:
        name: bundler
        state: present
      when: package_bundler.stats.changed

    - name: Install and enable apache
      ansible.builtin.package:
        name: apache2
        state: present

    - name: Create webapp directory
      ansible.builtin.file:
        path: /opt/webapps
        state: directory
        owner: rails
        group: rails
        mode: '0755'

    - name: Clone webapp repo
      ansible.builtin.git:
        repo: "{{ service_webapp_repo }}"
        dest: "{{ WEBAPP_PATH }}"
        update: yes

    - name: Checkout webapp tag
      ansible.builtin.git:
        repo: "{{ service_webapp_repo }}"
        dest: "{{ WEBAPP_PATH }}"
        revision: "{{ service_webapp_tag }}"

    - name: Modify Gemfile
      ansible.builtin.copy:
        content: |
          gem 'unicorn'
        dest: "{{ WEBAPP_PATH }}/Gemfile.local"
        owner: rails
        group: rails
        mode: '0755'

    - name: Install dependencies
      ansible.builtin.command:
        cmd: "bundle install --without development test rmagick postgresql"
        chdir: "{{ WEBAPP_PATH }}"
        creates: /opt/webapps/rails/tmp/cache

    - name: Generate secret key
      ansible.builtin.command:
        cmd: "bundle exec rake generate_session_store"
        chdir: "{{ WEBAPP_PATH }}"

    - name: Configure database.yml
      ansible.builtin.template:
        src: database.yml.erb
        dest: "{{ WEBAPP_PATH }}/config/database.yml"
        owner: rails
        group: rails
        mode: '0755'

    - name: Run database tasks and load default data
      ansible.builtin.command:
        cmd: "bundle exec rake db:migrate RAILS_ENV=production && bundle exec rake redmine:load_default_data RAILS_ENV=production REDMINE_LANG=en"
        chdir: "{{ WEBAPP_PATH }}"

    - name: Create rails user
      ansible.builtin.user:
        name: rails
        home: "{{ WEBAPP_PATH }}"
        shell: /bin/sh
        createhome: yes
        groups: rails
        append: yes
        system: yes

    - name: Set ownership of webapp directories
      ansible.builtin.file:
        path:
          - "{{ WEBAPP_PATH }}/files"
          - "{{ WEBAPP_PATH }}/log"
          - "{{ WEBAPP_PATH }}/tmp"
          - "{{ WEBAPP_PATH }}/public"
        owner: rails
        group: rails
        mode: '0755'

    - name: Configure unicorn
      ansible.builtin.upstart_job:
        name: unicorn
        description: "unicorn app server"
        command: "start-stop-daemon --start -c rails -d {{ WEBAPP_PATH }} --exec /usr/local/bin/bundle -- exec unicorn_rails -E production"
        start_on_boot: yes
        requires:
          - file.present "{{ WEBAPP_PATH }}/Gemfile.local"
          - command.succeeded "bundle install"

    - name: Disable default apache vhost
      ansible.builtin.command:
        cmd: "/usr/sbin/a2dissite default"
      when: package_apache.stats.changed

    - name